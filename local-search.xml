<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ROS自定义消息</title>
    <link href="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/"/>
    <url>/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="ROS-自定义消息"><a href="#ROS-自定义消息" class="headerlink" title="ROS 自定义消息"></a>ROS 自定义消息</h1><h2 id="一-概论"><a href="#一-概论" class="headerlink" title="一.概论"></a>一.概论</h2><p>std_msgs实在太弱了，能发出来的东西太少，所以我们想要自己定义一些信息，这样消息容量更多，能够传递更加复杂的消息。</p><p>自定义msgs有点想结构体</p><h2 id="二-具体实现"><a href="#二-具体实现" class="headerlink" title="二.具体实现"></a>二.具体实现</h2><h3 id="1-按照固定格式创建Msgs文件"><a href="#1-按照固定格式创建Msgs文件" class="headerlink" title="1.按照固定格式创建Msgs文件"></a>1.按照固定格式创建Msgs文件</h3><p>在现有的功能包下新建Msg文件夹，在其中添加文件person.msg </p><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/1st.png" alt="image-20240313204714163"></p><h2 id="2-配置xml与cmake"><a href="#2-配置xml与cmake" class="headerlink" title="2.配置xml与cmake"></a>2.配置xml与cmake</h2><ol><li>package.xml</li></ol><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/image-20240313204826620.png" alt="image-20240313204826620"></p><ol start="2"><li>cmakelist</li></ol><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/image-20240313204911908.png" alt="image-20240313204911908"></p><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/image-20240313205117490.png" alt="image-20240313205117490"></p><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/image-20240313205156540.png" alt="image-20240313205156540"></p><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/image-20240313205303043.png" alt="image-20240313205303043"></p><p>find_package是编译时的依赖，catkin_package是运行时的依赖</p><h2 id="3-编译"><a href="#3-编译" class="headerlink" title="3. 编译"></a>3. 编译</h2><p>Shift+ctrl+B后会在devel中生成中间文件，包括但不限于头文件等</p><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/image-20240313210129284.png" alt="image-20240313210129284"></p><h2 id="三、-发布方实现"><a href="#三、-发布方实现" class="headerlink" title="三、 发布方实现"></a>三、 发布方实现</h2><p>为了方便代码提示以及避免误抛异常，需要先配置 vscode，将前面生成的 head 文件路径配置进<br>c_cpp_properties.json 的includepath属性，下面为具体步骤</p><ol><li>在终端打开该文件</li></ol><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/image-20240313210146485.png" alt="image-20240313210146485"></p><ol start="2"><li>在终端输入pwd，复制所得的路径</li></ol><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/image-20240313210400551.png" alt="image-20240313210400551"></p><ol start="3"><li>在c_cpp_properties.json文件下新增一行这个，注意之前的要打逗号结束语句</li></ol><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/image-20240313210457795.png" alt="image-20240313210457795"></p><p>4.引用头文件，注意要有文件路径前缀</p><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/image-20240313210744668.png" alt="image-20240313210744668"></p><p>5.接下来按照订阅进行操作即可，一直到创建发布者对象使用如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">ros::Publisher pub = advertise &lt;plumbing_pub_sub::Person&gt;(<span class="hljs-string">&quot;liaotian&quot;</span>,<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>6.创建被发布的东西</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">plumbing_pub_sub::Person person;<br>person.name = <span class="hljs-string">&quot;满孝&quot;</span>;<br>person.age = <span class="hljs-number">114514</span>;<br>person.height = <span class="hljs-number">1.80</span>;<br></code></pre></td></tr></table></figure><ol start="7"><li><p>配置add_executable等</p><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/image-20240313211837454.png" alt="image-20240313211837454"></p><p><img src="/2024/12/01/ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF/image-20240313211858315.png" alt="image-20240313211858315"></p></li><li><p>因为使用了自定义消息，所以还需要配置add_dependencies</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_dependencies</span>(和<span class="hljs-keyword">add_executable</span>后的第一个参数一样  <span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>_generate_messages_cpp)<br></code></pre></td></tr></table></figure><p>注意，如果想用rostopic echo来查看所发的消息，那么在这个命令之前也要source一下，即</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">source ./devel/setup.bash<br></code></pre></td></tr></table></figure></li></ol><h2 id="完整的代码如下"><a href="#完整的代码如下" class="headerlink" title="完整的代码如下"></a>完整的代码如下</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    需求: 循环发布人的信息</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ros/ros.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;demo02_talker_listener/Person.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">setlocale</span>(LC_ALL,<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">//1.初始化 ROS 节点</span><br>    ros::<span class="hljs-built_in">init</span>(argc,argv,<span class="hljs-string">&quot;talker_person&quot;</span>);<br><br>    <span class="hljs-comment">//2.创建 ROS 句柄</span><br>    ros::NodeHandle nh;<br><br>    <span class="hljs-comment">//3.创建发布者对象</span><br>    ros::Publisher pub = nh.<span class="hljs-built_in">advertise</span>&lt;demo02_talker_listener::Person&gt;(<span class="hljs-string">&quot;chatter_person&quot;</span>,<span class="hljs-number">1000</span>);<br><br>    <span class="hljs-comment">//4.组织被发布的消息，编写发布逻辑并发布消息</span><br>    demo02_talker_listener::Person p;<br>    p.name = <span class="hljs-string">&quot;sunwukong&quot;</span>;<br>    p.age = <span class="hljs-number">2000</span>;<br>    p.height = <span class="hljs-number">1.45</span>;<br><br>    <span class="hljs-function">ros::Rate <span class="hljs-title">r</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">while</span> (ros::<span class="hljs-built_in">ok</span>())<br>    &#123;<br>        pub.<span class="hljs-built_in">publish</span>(p);<br>        p.age += <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;我叫:%s,今年%d岁,高%.2f米&quot;</span>, p.name.<span class="hljs-built_in">c_str</span>(), p.age, p.height);<br><br>        r.<span class="hljs-built_in">sleep</span>();<br>        ros::<span class="hljs-built_in">spinOnce</span>();<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="订阅方实现"><a href="#订阅方实现" class="headerlink" title="订阅方实现"></a>订阅方实现</h2><p>其他都无大差别</p><p>这里需要注意的是，发布者定义时可以不指名是何种消息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">ros::Subscriber sub = nh.<span class="hljs-built_in">subscribe</span>(<span class="hljs-string">&quot;liaotian&quot;</span>,<span class="hljs-number">10</span>,doPerson)<br></code></pre></td></tr></table></figure><p>具体参数可以参阅我之前写的ros中常用API一文：</p><p><a href="https://blog.csdn.net/m0_73092398/article/details/136544192">ros中常用的API-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>STM32串口通信之队列</title>
    <link href="/2024/12/01/STM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E9%98%9F%E5%88%97/"/>
    <url>/2024/12/01/STM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="STM32串口通信之队列实现"><a href="#STM32串口通信之队列实现" class="headerlink" title="STM32串口通信之队列实现"></a>STM32串口通信之队列实现</h2><h2 id="1、学习资源"><a href="#1、学习资源" class="headerlink" title="1、学习资源"></a>1、学习资源</h2><p>学习资源来自于B站优质单片机up铁头山羊，有需要全程学习的同学可以点击如下链接：<br><a href="https://www.bilibili.com/video/BV11X4y1j7si?p=26&vd_source=9806ecb9c648ad387aface33b157f6d4">铁头山羊教程</a><br><img src="/2024/12/01/STM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E9%98%9F%E5%88%97/first.png" alt="铁头山羊"></p><h2 id="2、为什么要用队列实现串口的消息收发？"><a href="#2、为什么要用队列实现串口的消息收发？" class="headerlink" title="2、为什么要用队列实现串口的消息收发？"></a>2、为什么要用队列实现串口的消息收发？</h2><p>为了实现串口消息收发这一目的，我们有许多方式，包括<strong>轮训标志位</strong>、 <strong>中断收发</strong> 、<strong>队列收发</strong>，其中。队列收发可看做中断收发的一种升级形式，其能更好的收发消息，避免消息的遗失。下面我们来看一下具体为什么。</p><h3 id="2-1-轮训标志位"><a href="#2-1-轮训标志位" class="headerlink" title="2.1 轮训标志位"></a>2.1 轮训标志位</h3><h4 id="2-1-1-数据的发送"><a href="#2-1-1-数据的发送" class="headerlink" title="2.1.1 数据的发送"></a>2.1.1 数据的发送</h4><p>总代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x_pal.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>GPIO_InitTypeDef GPIOInitStruct;<br><br>PAL_Init();<br><br><span class="hljs-comment">// 初始化Tx PB6 AF_PP 10MHz</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); <span class="hljs-comment">// 开启GPIOB的时钟</span><br>GPIOInitStruct.GPIO_Pin = GPIO_Pin_6;<br>GPIOInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;<br>GPIOInitStruct.GPIO_Speed = GPIO_Speed_10MHz;<br>GPIO_Init(GPIOB, &amp;GPIOInitStruct);<br><br><span class="hljs-comment">// 初始化Rx PB7 IPU</span><br>GPIOInitStruct.GPIO_Pin = GPIO_Pin_7;<br>GPIOInitStruct.GPIO_Mode = GPIO_Mode_IPU;<br>GPIO_Init(GPIOB, &amp;GPIOInitStruct);<br><br><span class="hljs-comment">// 重映射USART1的Tx和Rx引脚</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); <span class="hljs-comment">//开启AFIO的时钟</span><br>GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE); <br><br><span class="hljs-comment">// 使能USART1的时钟</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);<br><br><span class="hljs-comment">// 设置USART1的参数</span><br>USART_InitTypeDef USARTInitStruct;<br>USARTInitStruct.USART_BaudRate = <span class="hljs-number">9600</span>;<br>USARTInitStruct.USART_WordLength = USART_WordLength_8b;<br>USARTInitStruct.USART_StopBits = USART_StopBits_1;<br>USARTInitStruct.USART_Parity = USART_Parity_No;<br>USARTInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<br>USARTInitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;<br><br>USART_Init(USART1, &amp;USARTInitStruct);<br><br><span class="hljs-comment">// 闭合USART1的总开关</span><br>USART_Cmd(USART1, ENABLE);<br><span class="hljs-comment">//////////////////////////////////////////////////////////////////</span><br> 发送单个数据<br><span class="hljs-comment">//// 1. 等待TDR寄存器清空</span><br><span class="hljs-comment">//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)&#123;&#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//// 2. 写入要发送的数据</span><br><span class="hljs-comment">//USART_SendData(USART1, 0x5a);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//// 3. 等待数据发送完成</span><br><span class="hljs-comment">//while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)&#123;&#125;</span><br><br><span class="hljs-comment">//////////////////////////////////////////////////////////////////</span><br>发送一个数组<br><span class="hljs-comment">//  uint8_t a[] = &#123;0,1,2,3,4,5&#125;;</span><br><span class="hljs-comment">//uint32_t i;</span><br><span class="hljs-comment">//---------------------------------------------------------------</span><br><span class="hljs-comment">//方法一：</span><br><span class="hljs-comment">//for(i=0;i&lt;sizeof(a) / sizeof(uint8_t);i++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//// 1. 等待TXE置位</span><br><span class="hljs-comment">//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="hljs-comment">//// 2. 数据写入TDR</span><br><span class="hljs-comment">//USART_SendData(USART1, a[i]);</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//// 3. 等待数据发送完成</span><br><span class="hljs-comment">//while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);</span><br><span class="hljs-comment">//------------------------------------------------------------------</span><br><span class="hljs-comment">//方法二：</span><br><span class="hljs-comment">//  while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="hljs-comment">//USART_SendData(USART1, &#x27;a&#x27;);</span><br><span class="hljs-comment">//while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);</span><br><br>发送一个字符串：<br><span class="hljs-comment">//  const char *str = &quot;Hello world&quot;;</span><br><span class="hljs-comment">//uint32_t i;</span><br><span class="hljs-comment">//for(i=0; i&lt;strlen(str);i++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//// 1. 等待TXE置位</span><br><span class="hljs-comment">//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="hljs-comment">//// 2. TDR</span><br><span class="hljs-comment">//USART_SendData(USART1, str[i]);</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//// 3. TC置位</span><br><span class="hljs-comment">//while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);</span><br><br><br>  <br><br></code></pre></td></tr></table></figure><p>轮询标志位最大的特点就是在USART&#x2F;UART初始化时没有对NVIC进行配置，同时在消息收发时采用如下代码对标志位进行检验：<br><strong>单个数据的发送</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)&#123;&#125;<br><br><span class="hljs-comment">// 2. 写入要发送的数据</span><br>USART_SendData(USART1, <span class="hljs-number">0x5a</span>);<br><br><span class="hljs-comment">// 3. 等待数据发送完成</span><br><span class="hljs-keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>数组的发送</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-type">uint8_t</span> a[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">uint32_t</span> i;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>);i++)<br>&#123;<br><span class="hljs-comment">// 1. 等待TXE置位</span><br><span class="hljs-keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);<br><span class="hljs-comment">// 2. 数据写入TDR</span><br>USART_SendData(USART1, a[i]);<br>&#125;<br><br><span class="hljs-comment">// 3. 等待数据发送完成</span><br><span class="hljs-keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);<br> <span class="hljs-keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);<br>USART_SendData(USART1, <span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);<br><br></code></pre></td></tr></table></figure><p><strong>字符串的发送</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *str = <span class="hljs-string">&quot;Hello world&quot;</span>;<br><span class="hljs-type">uint32_t</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">strlen</span>(str);i++)<br>&#123;<br><span class="hljs-comment">// 1. 等待TXE置位</span><br><span class="hljs-keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);<br><span class="hljs-comment">// 2. TDR</span><br>USART_SendData(USART1, str[i]);<br>&#125;<br><span class="hljs-comment">// 3. TC置位</span><br><span class="hljs-keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);<br></code></pre></td></tr></table></figure><p>相信看完这些代码，你一定会感到疑惑，这些USART_FLAG_TXE、USART_FLAG_TC究竟是什么？现在让我们来看这张图：<br><img src="/2024/12/01/STM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E9%98%9F%E5%88%97/second.png" alt="寄存器图"><br>我们跟着上面这张图，当一个数据被发送时，其实就是一个数据被写入TDR（Transmit Data Register）这一寄存器中，之后，会导致状态寄存器中的TXE（Tranimit Pin Empty）被从ReSet情况跳转到Set，当我们的数据全部发送完后TC（Transimit Compete)寄存器便会从ReSet变为Set。</p><p>所以，当我们想要发送数据时，其实与之相关的寄存器只有TXE、TC以及TDR寄存器。<br>我们在发送数据前，先要查看TXE是否是SET，即TX引脚是否已经空了，否则就一直在一个while循环中等待其变为空，<br>再将数据写入TDR寄存器中，<br>之后一直等待TC置1，否则一直在一个while循环中等待。</p><p>这个过程也就是我们代码中所写的东西，如果由不理解的同学可以回到原视频看铁头山羊的视频进行学习。</p><p>现在，我们总结一下发送的步骤：<br>1.等待TXE置位，确保没有数据在发送；（while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) &#x3D;&#x3D; RESET);）</p><ol start="2"><li>将数据写入TDR寄存器中；（USART_SendData(USART1, a[i]);）</li><li>等待TC置位；（while(USART_GetFlagStatus(USART1, USART_FLAG_TC) &#x3D;&#x3D; RESET);）</li></ol><h3 id="2-2-数据的接收"><a href="#2-2-数据的接收" class="headerlink" title="2.2 数据的接收"></a>2.2 数据的接收</h3><p>说完了数据发送，接下来来讲讲数据的接受：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x_pal.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>GPIO_InitTypeDef GPIOInitStruct;<br><br>PAL_Init();<br><br><span class="hljs-comment">// 初始化Tx PB6 AF_PP 10MHz</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); <span class="hljs-comment">// 开启GPIOB的时钟</span><br>GPIOInitStruct.GPIO_Pin = GPIO_Pin_6;<br>GPIOInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;<br>GPIOInitStruct.GPIO_Speed = GPIO_Speed_10MHz;<br>GPIO_Init(GPIOB, &amp;GPIOInitStruct);<br><br><span class="hljs-comment">// 初始化Rx PB7 IPU</span><br>GPIOInitStruct.GPIO_Pin = GPIO_Pin_7;<br>GPIOInitStruct.GPIO_Mode = GPIO_Mode_IPU;<br>GPIO_Init(GPIOB, &amp;GPIOInitStruct);<br><br><span class="hljs-comment">// 重映射USART1的Tx和Rx引脚</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); <span class="hljs-comment">//开启AFIO的时钟</span><br>GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE); <br><br><span class="hljs-comment">// 使能USART1的时钟</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);<br><br><span class="hljs-comment">// 设置USART1的参数</span><br>USART_InitTypeDef USARTInitStruct;<br>USARTInitStruct.USART_BaudRate = <span class="hljs-number">9600</span>;<br>USARTInitStruct.USART_WordLength = USART_WordLength_8b;<br>USARTInitStruct.USART_StopBits = USART_StopBits_1;<br>USARTInitStruct.USART_Parity = USART_Parity_No;<br>USARTInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<br>USARTInitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;<br><br>USART_Init(USART1, &amp;USARTInitStruct);<br><br><span class="hljs-comment">// 闭合USART1的总开关</span><br>USART_Cmd(USART1, ENABLE);<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);<br>GPIOInitStruct.GPIO_Pin = GPIO_Pin_13;<br>GPIOInitStruct.GPIO_Mode = GPIO_Mode_Out_OD;<br>GPIOInitStruct.GPIO_Speed = GPIO_Speed_2MHz;<br>GPIO_Init(GPIOC, &amp;GPIOInitStruct);<br><br>GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_SET); <span class="hljs-comment">// 熄灭LED</span><br><br>  <span class="hljs-type">uint8_t</span> c;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">// 1. RXNE</span><br><span class="hljs-keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);<br>c = USART_ReceiveData(USART1);<br><br><span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#123;<br> <span class="hljs-comment">// 熄灭</span><br>GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_SET);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;1&#x27;</span>)<br>&#123;<br> <span class="hljs-comment">//点亮</span><br>GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_RESET);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们回到这个图中来看看数据的接受是怎么样一个情况：<br><img src="/2024/12/01/STM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E9%98%9F%E5%88%97/third.png" alt="寄存器"><br>相比较数据的发送，数据的接受只需要用到RXNE这么一个标志位，我们所有的数据接受都将围绕着这么一个标志位进行展开：<br>首先，从RXNE寄存器的英文名字RX Not Empty可以看出该寄存器类似TXE寄存器，主要用来判断RX引脚是否是空的，当其为1(SET)时，也就是说RX非空，有东西传入，当其为0（RESET）时，也就是RX非空是假的，那么换言之就是RX是空的。<br>基于此，那么逻辑就很明确了：<br>我们首先等待RXNE寄存器由0（RESET）变为1（SET），然后将数据读入RDR寄存器中（不知道为什么这张图中标位了TDR)，即可完成数据的接受。</p><h2 id="3、-中断收发数据"><a href="#3、-中断收发数据" class="headerlink" title="3、 中断收发数据"></a>3、 中断收发数据</h2><p>我们在学习一个新的概念之前，始终要持有这样一种态度，那么便是我们为什么要学这个东西，这个东西相比较我们之前所拥有的东西来说有什么优点。<br>那么我们现在来思考一下轮询标志位有何缺点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//// 1. 等待TDR寄存器清空</span><br><span class="hljs-keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)&#123;&#125;<br><br><span class="hljs-comment">//// 2. 写入要发送的数据</span><br>USART_SendData(USART1, <span class="hljs-number">0x5a</span>);<br><br><span class="hljs-comment">//// 3. 等待数据发送完成</span><br><span class="hljs-keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)&#123;&#125;<br></code></pre></td></tr></table></figure><p>在这里，我们仅仅以单个数据的发送来进行思考：如果我们一直不发送数据，那么就会一直陷入第一个while循环之中无法再做其他事情，对于只需要发送数据或者接受数据来说，这当然是没有问题的，但是当我们需要在发送数据之外再干一些其他事时，好像就显得有些力不从心了。<br>因此，我们希望当有东西需要发送或者接收时，我们再调用相关的程序，而不需要时，我们则进行其他任务。有没有这样两全齐美的好事呢？恰巧使用中断的方式来接受数据就能达到这一点：<br><img src="/2024/12/01/STM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E9%98%9F%E5%88%97/fourth.png" alt="中断接受"><br>本章我们与前一章节的顺序不同，会先讲中断接受再讲队列实现再讲中断发送，这样的顺序是为了和铁头山羊的视频顺序一致所考虑的，方便各位同学学习。</p><h3 id="3-1-串口中断的标志位"><a href="#3-1-串口中断的标志位" class="headerlink" title="3.1 串口中断的标志位"></a>3.1 串口中断的标志位</h3><p><img src="/2024/12/01/STM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E9%98%9F%E5%88%97/5th.png" alt="寄存器"><br>又回到这个清切的图中，我们在上衣章节中其实仅仅用到了紫色部分的状态寄存器(SR,Situation Register）的部分，而没有使用到蓝色部分的中断使能寄存器（IER,Interruption Enable Register)。其实，SR寄存器都能够产生中断源，但是这个中断源是否能够产生中断信号就得看中断使能寄存器是否愿意。例如，当SR中的TXE置1时，如果IER的TXE IE也为1，那么就能产生一个中断，如果TXEIE是0 ，那么就无法产生中断，他们二者的数值会进行一个“与”那么一个操作。</p><h3 id="3-2-串口中断的接受"><a href="#3-2-串口中断的接受" class="headerlink" title="3.2 串口中断的接受"></a>3.2 串口中断的接受</h3><p>总代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x_pal.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">USART_Recv_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>GPIO_InitTypeDef GPIOInitStruct;<br><br>NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<br><br>PAL_Init();<br><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);<br>GPIOInitStruct.GPIO_Pin = GPIO_Pin_13;<br>GPIOInitStruct.GPIO_Mode = GPIO_Mode_Out_OD;<br>GPIOInitStruct.GPIO_Speed = GPIO_Speed_2MHz;<br>GPIO_Init(GPIOC, &amp;GPIOInitStruct);<br><br>USART_Recv_Init();<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">USART_Recv_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// 1. 初始化IO引脚</span><br><span class="hljs-comment">// PB6 Tx PB7 Rx</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);<br><br>GPIO_InitTypeDef GPIOInitStruct;<br>GPIOInitStruct.GPIO_Pin = GPIO_Pin_6;<br>GPIOInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;<br>GPIOInitStruct.GPIO_Speed = GPIO_Speed_10MHz;<br>GPIO_Init(GPIOB, &amp;GPIOInitStruct);<br><br>GPIOInitStruct.GPIO_Pin = GPIO_Pin_7;<br>GPIOInitStruct.GPIO_Mode = GPIO_Mode_IPU;<br>GPIO_Init(GPIOB, &amp;GPIOInitStruct);<br><br><span class="hljs-comment">// 复用功能重映射</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);<br>GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);<br><br><span class="hljs-comment">// 2. 使能USART1的时钟</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);<br><br><span class="hljs-comment">// 3. 配置USART的参数</span><br><span class="hljs-comment">// 9600 8 No 1 Tx|Rx</span><br>USART_InitTypeDef USARTInitStruct;<br><br>USARTInitStruct.USART_BaudRate = <span class="hljs-number">9600</span>;<br>USARTInitStruct.USART_WordLength = USART_WordLength_8b;<br>USARTInitStruct.USART_Parity = USART_Parity_No;<br>USARTInitStruct.USART_StopBits = USART_StopBits_1;<br>USARTInitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;<br>USARTInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<br>USART_Init(USART1, &amp;USARTInitStruct);<br><br><span class="hljs-comment">// 4. 配置中断源</span><br>USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);<br><br>NVIC_InitTypeDef NVICInitStruct;<br>NVICInitStruct.NVIC_IRQChannel = USART1_IRQn;<br>NVICInitStruct.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">0</span>;<br>NVICInitStruct.NVIC_IRQChannelSubPriority = <span class="hljs-number">0</span>;<br>NVICInitStruct.NVIC_IRQChannelCmd = ENABLE;<br>NVIC_Init(&amp;NVICInitStruct);<br><br><span class="hljs-comment">// 5. 闭合USART1的总开关</span><br>USART_Cmd(USART1, ENABLE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">USART1_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">uint8_t</span> c;<br><span class="hljs-keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) == SET)<br>  &#123;<br><span class="hljs-comment">// 清除中断，读取数据</span><br>c = USART_ReceiveData(USART1);<br><br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;0&#x27;</span>)<br>    &#123;<br><span class="hljs-comment">// 熄灯</span><br>GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_SET);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;1&#x27;</span>)<br>&#123;<br><span class="hljs-comment">//亮灯</span><br>GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_RESET);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们对比前一章的代码，不难发现相比较而言，多出来的东西仅仅只是在<strong>初始化时配置了中断源以及NVIC，并且多了中断函数</strong></p><p><strong>初始化时配置中断源以及NVIC</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 4. 配置中断源</span><br>USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);<br><br>NVIC_InitTypeDef NVICInitStruct;<br>NVICInitStruct.NVIC_IRQChannel = USART1_IRQn;<br>NVICInitStruct.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">0</span>;<br>NVICInitStruct.NVIC_IRQChannelSubPriority = <span class="hljs-number">0</span>;<br>NVICInitStruct.NVIC_IRQChannelCmd = ENABLE;<br>NVIC_Init(&amp;NVICInitStruct);<br></code></pre></td></tr></table></figure><p>其中，USART_ITConfig是用来选择哪些中断能够产生中断信号，其原理其实是对着之前说的IER寄存器进行赋值操作。由于这里我们仅仅只是需要接受消息，所以我们便选择RXNE这一个寄存器的中断标志位。</p><p><strong>中断函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">USART1_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">uint8_t</span> c;<br><span class="hljs-keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) == SET)<br>  &#123;<br><span class="hljs-comment">// 清除中断，读取数据</span><br>c = USART_ReceiveData(USART1);<br><br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;0&#x27;</span>)<br>    &#123;<br><span class="hljs-comment">// 熄灯</span><br>GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_SET);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;1&#x27;</span>)<br>&#123;<br><span class="hljs-comment">//亮灯</span><br>GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_RESET);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>中断函数中，我们需要先对中断源是哪个进行判断，这里需要说一句，便是这个中断源的清除并不需要像其他外设那样需要我们用ClearFlag之类的api自己手动清除，只需要我们将数据读出即可清除标志位。<br>由于课程安排，到了这里中断就已经结束了，没有将中断实现数据接受，接下来来到队列实现数据收发</p><h2 id="4-队列实现数据收发"><a href="#4-队列实现数据收发" class="headerlink" title="4. 队列实现数据收发"></a>4. 队列实现数据收发</h2><p>现在，我们来讲讲为什么我们希望使用队列来实现数据的收发。</p><p>我们首先来看之前写的中断数据接受的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">USART1_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">uint8_t</span> c; <span class="hljs-comment">//0.1us</span><br><span class="hljs-keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) == SET) <span class="hljs-comment">//0.1us</span><br>  &#123;<br><span class="hljs-comment">// 清除中断，读取数据</span><br>c = USART_ReceiveData(USART1); <span class="hljs-comment">//0.1us</span><br><br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-comment">// 0.1us</span><br>    &#123;<br><span class="hljs-comment">// 熄灯</span><br>GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_SET); <span class="hljs-comment">//0.1us</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-comment">// 0.1 us </span><br>&#123;<br><span class="hljs-comment">//亮灯</span><br>GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_RESET); <span class="hljs-comment">// 0.1us</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不难看出，这段代码想要实现的功能即为当我们接受到一个数时，我们将他存下来并进行判断，然后如果是0就灭灯，如果是1就开灯。<br>这样将数据就在中断函数中对数据进行处理的方式便是<strong>就地处理</strong>，现在让我们又来思考这种方式有什么缺点。</p><p>其实，就点灯这一项目来说，就地处理的方式是没有问题的，因为该段代码较为简单，所需要的时间仅仅只是如上代码右侧所需总和0.6us罢了。但是当我们遇到如下的代码情况却遇到了问题。</p><p><img src="/2024/12/01/STM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E9%98%9F%E5%88%97/6th.png" alt="就地处理"><img src="/2024/12/01/STM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E9%98%9F%E5%88%97/7th.png" alt="在这里插入图片描述"></p><p>如图所示，我们的消息接受间隔其实是$1&#x2F;baud$,其近似于0.1ms,当我们想要执行这段代码时，却会由于SendString（a）这一段语句导致会超时。为什么呢？因为当我们发送一个很长的数组时<br>(橙色区域），可能在发到一半时便又有了新的消息被接受到，从而导致TDR寄存还没发送完数据之后就被打断，重新发送新的数据。</p><p>那么，有什么办法解决这一问题呢？</p><h3 id="4-1-延迟处理"><a href="#4-1-延迟处理" class="headerlink" title="4.1 延迟处理"></a>4.1 延迟处理</h3><p>既然我们在中断函数中进行数据处理的方式可能会导致有些数据在发送时可能会被打断从而导致遗失，那么我们不妨换一种想法，我们将这些数据存储起来，哪怕被打断了，RDR寄存器已经换了新的值，也不会导致我们的数据会被遗失。<br>那么，这个存储数据的结构需要做到先存起来的数据先被发送，后存储的数据后被发送，满足这点性质的数据结构其实就是队列的FIFO（First In First Out）。</p><h4 id="4-1-1-队列的实现"><a href="#4-1-1-队列的实现" class="headerlink" title="4.1.1 队列的实现"></a>4.1.1 队列的实现</h4><p>有关于队列的实现在这里不会多讲，而会直接贴出代码，如果有需要可以自己去查相关资料即可。<br>Queue.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Queue_Init</span><span class="hljs-params">(Queue_HandleTypeDef *hQueue)</span><br>&#123;<br>hQueue-&gt;Tail = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Queue_Enqueue</span><span class="hljs-params">(Queue_HandleTypeDef *hQueue, <span class="hljs-type">uint8_t</span> Element)</span><br>&#123;<br>hQueue-&gt;Data[hQueue-&gt;Tail ++] = Element;<br>&#125;<br><br>ErrorStatus <span class="hljs-title function_">Queue_Dequeue</span><span class="hljs-params">(Queue_HandleTypeDef *hQueue, <span class="hljs-type">uint8_t</span> *pElement)</span><br>&#123;<br><span class="hljs-type">uint32_t</span> i;<br><span class="hljs-keyword">if</span>(hQueue-&gt;Tail == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> ERROR; <span class="hljs-comment">// 队列空，操作无效</span><br>*pElement = hQueue-&gt;Data[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;hQueue-&gt;Tail<span class="hljs-number">-1</span>;i++)<br>&#123;<br>hQueue-&gt;Data[i] = hQueue-&gt;Data[i+<span class="hljs-number">1</span>];<br>&#125;<br>hQueue-&gt;Tail--;<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>Queue.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _QUEUE_H_</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _QUEUE_H_</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">uint8_t</span> Data[<span class="hljs-number">100</span>];<br><span class="hljs-type">uint16_t</span> Tail; <span class="hljs-comment">// 队尾</span><br>&#125; Queue_HandleTypeDef;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Queue_Init</span><span class="hljs-params">(Queue_HandleTypeDef *hQueue)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Queue_Enqueue</span><span class="hljs-params">(Queue_HandleTypeDef *hQueue, <span class="hljs-type">uint8_t</span> Element)</span>;<br>ErrorStatus <span class="hljs-title function_">Queue_Dequeue</span><span class="hljs-params">(Queue_HandleTypeDef *hQueue, <span class="hljs-type">uint8_t</span> *pElement)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// 防止头文件被重复引用</span></span><br><br></code></pre></td></tr></table></figure><h3 id="4-2-队列实现数据发送与接受"><a href="#4-2-队列实现数据发送与接受" class="headerlink" title="4.2 队列实现数据发送与接受"></a>4.2 队列实现数据发送与接受</h3><p>总代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x_pal.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;queue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">static</span> Queue_HandleTypeDef hQueue;<br><span class="hljs-type">static</span> Queue_HandleTypeDef hTxQueue;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">USART_Echo_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">USART_Echo_Proc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">USART1_SendString</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *Str)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<br><br>PAL_Init();<br><br>USART_Echo_Init();<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>USART_Echo_Proc();<br>&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">USART_Echo_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>GPIO_InitTypeDef GPIOInitStruct;<br><br>Queue_Init(&amp;hQueue);<br>Queue_Init(&amp;hTxQueue);<br><br><span class="hljs-comment">// 1. 初始化IO引脚</span><br><span class="hljs-comment">// PB6 PB7</span><br><span class="hljs-comment">// Tx</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);<br>GPIOInitStruct.GPIO_Pin = GPIO_Pin_6;<br>GPIOInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;<br>GPIOInitStruct.GPIO_Speed = GPIO_Speed_10MHz;<br>GPIO_Init(GPIOB, &amp;GPIOInitStruct);<br><span class="hljs-comment">// Rx</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);<br>GPIOInitStruct.GPIO_Pin = GPIO_Pin_7;<br>GPIOInitStruct.GPIO_Mode = GPIO_Mode_IPU;<br>GPIO_Init(GPIOB, &amp;GPIOInitStruct);<br><span class="hljs-comment">// AFIO</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);<br>GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);<br><br><span class="hljs-comment">// 2. 使能USART1的时钟</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);<br><br><span class="hljs-comment">// 3. 配置USART1的参数</span><br>USART_InitTypeDef USARTInitStruct;<br>USARTInitStruct.USART_BaudRate = <span class="hljs-number">9600</span>;<br>USARTInitStruct.USART_WordLength = USART_WordLength_8b;<br>USARTInitStruct.USART_Parity = USART_Parity_No;<br>USARTInitStruct.USART_StopBits = USART_StopBits_1;<br>USARTInitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;<br>USARTInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<br>USART_Init(USART1, &amp;USARTInitStruct);<br><br><span class="hljs-comment">// 4. 配置中断</span><br>USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);<br><br>NVIC_InitTypeDef NVICInitStruct;<br>NVICInitStruct.NVIC_IRQChannel = USART1_IRQn;<br>NVICInitStruct.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">0</span>;<br>NVICInitStruct.NVIC_IRQChannelSubPriority = <span class="hljs-number">0</span>;<br>NVICInitStruct.NVIC_IRQChannelCmd = ENABLE;<br>NVIC_Init(&amp;NVICInitStruct);<br><br><span class="hljs-comment">// 5. 闭合USART1的总开关</span><br>USART_Cmd(USART1, ENABLE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">USART1_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">uint8_t</span> c;<br><span class="hljs-keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) == SET)<br>&#123;<br>c = USART_ReceiveData(USART1);<br><br>Queue_Enqueue(&amp;hQueue, c);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(USART_GetITStatus(USART1, USART_IT_TXE) == SET)<br>&#123;<br><span class="hljs-keyword">if</span>(Queue_Dequeue(&amp;hTxQueue, &amp;c) == SUCCESS)<br>&#123;<br>USART_SendData(USART1, c);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>USART_ITConfig(USART1, USART_IT_TXE, DISABLE);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> a[<span class="hljs-number">100</span>];<br><span class="hljs-type">static</span> <span class="hljs-type">uint16_t</span> cursor = <span class="hljs-number">0</span>; <span class="hljs-comment">//游标</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">USART_Echo_Proc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">uint8_t</span> c;<br><br>USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);<br>ErrorStatus error = Queue_Dequeue(&amp;hQueue, &amp;c);<br>USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);<br><br><span class="hljs-keyword">if</span>(error == SUCCESS)<br>&#123;<br>a[cursor++] = c;<br><br><span class="hljs-keyword">if</span>(cursor&gt;<span class="hljs-number">2</span> &amp;&amp; a[cursor<span class="hljs-number">-2</span>] == <span class="hljs-string">&#x27;\r&#x27;</span>&amp;&amp; a[cursor - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment">// 收到新行</span><br>&#123;<br><span class="hljs-comment">// 发送出去</span><br>a[cursor] = <span class="hljs-number">0</span>;<br>USART1_SendString((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)a);<br>cursor=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">USART1_SendString</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *Str)</span><br>&#123;<br><span class="hljs-type">uint32_t</span> i;<br>USART_ITConfig(USART1, USART_IT_TXE, DISABLE);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(Str);i++)<br>&#123;<br>Queue_Enqueue(&amp;hTxQueue, Str[i]);<br>&#125;<br>USART_ITConfig(USART1, USART_IT_TXE, ENABLE);<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>最为重要的部分为中断函数与SendString函数函数，不难发现其实就是入队与出队即可完成。下面我们来详解整个流程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<br><br>PAL_Init();<br><br>USART_Echo_Init();<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>USART_Echo_Proc();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不难发现，在主函数中，其实已经被包装的很包装了，我们实现了各种初始化（中断、PAL库、USART，有关PAL库的内容如果以后有机会可以写一个），并在while循环中进行了Echo的进程函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">USART1_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">uint8_t</span> c;<br><span class="hljs-keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) == SET)<br>&#123;<br>c = USART_ReceiveData(USART1);<br><br>Queue_Enqueue(&amp;hQueue, c);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(USART_GetITStatus(USART1, USART_IT_TXE) == SET)<br>&#123;<br><span class="hljs-keyword">if</span>(Queue_Dequeue(&amp;hTxQueue, &amp;c) == SUCCESS)<br>&#123;<br>USART_SendData(USART1, c);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>USART_ITConfig(USART1, USART_IT_TXE, DISABLE);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而中断函数，则是对中断源进行处理：<br>如果是RXNE中断源置1，我们就将c这个数字读进RDR寄存器，又将这个数读进我们的hQueue这个队列中，以等待后续的处理；<br>如果是由于TXE置1引起的中断，那么我们就判断hTxQueue这个队列中的元素是否能出队，如果能出队就将出队的元素写入TDR中，如果数据发送完了，此时就无法出队，就清楚中断源。</p><p>但是我们知道，RXNE可以由外界的数据决定是否置1，但是TXE怎么置1呢？答案是我们手动对其进行置1。我们转到USART_SendString这个函数中来看一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">USART1_SendString</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *Str)</span><br>&#123;<br><span class="hljs-type">uint32_t</span> i;<br>USART_ITConfig(USART1, USART_IT_TXE, DISABLE);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(Str);i++)<br>&#123;<br>Queue_Enqueue(&amp;hTxQueue, Str[i]);<br>&#125;<br>USART_ITConfig(USART1, USART_IT_TXE, ENABLE);<br>&#125;<br></code></pre></td></tr></table></figure><p>不难发现，这段代码实现的是首先将TXE置为0，这是中断源的初始化，然后，我们将Str这个数组中的元素写入hTxQueue之中，待Str写完之后，我们就开启TXE这一中断源，引起中断函数的开始。</p><p>写到这里已经是整篇文章的尾声了，串口这一章节的学习实属不易，市面上存在的教学资源也良莠不齐，我认为这种队列实现延迟处理的方式是最为稳妥的，如果有更好的方法，欢迎各位的讨论！</p>]]></content>
    
    
    <categories>
      
      <category>Embedded System</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
